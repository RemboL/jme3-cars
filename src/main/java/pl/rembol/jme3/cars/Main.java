package pl.rembol.jme3.cars;import com.jme3.app.SimpleApplication;import com.jme3.app.StatsAppState;import com.jme3.bullet.BulletAppState;import com.jme3.bullet.control.RigidBodyControl;import com.jme3.bullet.control.VehicleControl;import com.jme3.bullet.util.CollisionShapeFactory;import com.jme3.input.ChaseCamera;import com.jme3.input.KeyInput;import com.jme3.input.controls.ActionListener;import com.jme3.input.controls.KeyTrigger;import com.jme3.light.AmbientLight;import com.jme3.light.DirectionalLight;import com.jme3.material.Material;import com.jme3.math.ColorRGBA;import com.jme3.math.FastMath;import com.jme3.math.Quaternion;import com.jme3.math.Vector3f;import com.jme3.renderer.RenderManager;import com.jme3.renderer.ViewPort;import com.jme3.renderer.queue.RenderQueue;import com.jme3.scene.Node;import com.jme3.scene.Spatial;import com.jme3.scene.control.AbstractControl;import com.jme3.shadow.DirectionalLightShadowRenderer;import com.jme3.system.AppSettings;import com.jme3.terrain.geomipmap.TerrainQuad;import pl.rembol.jme3.utils.Materials;public class Main extends SimpleApplication {    private boolean accelerate = false;    private boolean brake = false;    private boolean steerLeft = false;    private boolean steerRight = false;    private Main() {        super(new StatsAppState());    }    public static void main(String[] args) {        Main app = new Main();        app.setShowSettings(false);        AppSettings settings = new AppSettings(true);        settings.setWidth(1280);        settings.setHeight(720);        app.setSettings(settings);        app.start();    }    @Override    public void simpleInitApp() {        BulletAppState bulletAppState = new BulletAppState();        getStateManager().attach(bulletAppState);        createTerrain(bulletAppState);        createLights();        Node car = (Node) getAssetManager().loadModel("car.frame.blend");        car.setShadowMode(RenderQueue.ShadowMode.Cast);        rootNode.attachChild(car);        VehicleControl carControl = new VehicleControl(CollisionShapeFactory.createDynamicMeshShape(car), 400);        float stiffness = 60.0f;        float compValue = .1f;        float dampValue = .4f;        carControl.setSuspensionCompression(compValue * 2.0f * FastMath.sqrt(stiffness));        carControl.setSuspensionDamping(dampValue * 2.0f * FastMath.sqrt(stiffness));        carControl.setSuspensionStiffness(stiffness);        carControl.setMaxSuspensionForce(6000.0f);        carControl.setAngularDamping(.4f);        carControl.setFrictionSlip(.8f);        car.addControl(carControl);        addWheel(car, new Vector3f(-.7f, 0, 1.4f), true, true);        addWheel(car, new Vector3f(-.7f, 0, -1.1f), true, false);        addWheel(car, new Vector3f(.7f, 0, -1.1f), false, false);        addWheel(car, new Vector3f(.7f, 0, 1.4f), false, true);        bulletAppState.getPhysicsSpace().add(car);        Materials.modifyMaterials(car, material -> material.setColor("Ambient", ((ColorRGBA) material.getParam("Diffuse").getValue())));        rootNode.attachChild(car);        initCamera(car);        initInput(car);    }    private void initInput(Node car) {        inputManager.addMapping("accelerate", new KeyTrigger(KeyInput.KEY_W));        inputManager.addListener((ActionListener) (name, isPressed, tpf) -> accelerate = isPressed, "accelerate");        inputManager.addMapping("brake", new KeyTrigger(KeyInput.KEY_S));        inputManager.addListener((ActionListener) (name, isPressed, tpf) -> brake = isPressed, "brake");        inputManager.addMapping("steerLeft", new KeyTrigger(KeyInput.KEY_A));        inputManager.addListener((ActionListener) (name, isPressed, tpf) -> steerLeft = isPressed, "steerLeft");        inputManager.addMapping("steerRight", new KeyTrigger(KeyInput.KEY_D));        inputManager.addListener((ActionListener) (name, isPressed, tpf) -> steerRight = isPressed, "steerRight");        car.addControl(new AbstractControl() {            @Override            protected void controlUpdate(float tpf) {                getSpatial().getControl(VehicleControl.class).accelerate(accelerate ? 100f : 0f);                getSpatial().getControl(VehicleControl.class).brake(brake ? 100f : 0f);                getSpatial().getControl(VehicleControl.class).steer(((steerLeft ? 1 : 0) + (steerRight ? -1 : 0)) * FastMath.PI / 8);            }            @Override            protected void controlRender(RenderManager rm, ViewPort vp) {            }        });    }    private void initCamera(Node car) {        cam.setLocation(new Vector3f(0, 5, 20));        ChaseCamera chaseCam = new ChaseCamera(cam, car, inputManager);        chaseCam.setSmoothMotion(true);    }    private void addWheel(Node car, Vector3f position, boolean flipped, boolean isSteering) {        Node wheel = new Node();        Spatial wheelGeometry = getAssetManager().loadModel("tire.blend");        if (flipped) {            wheelGeometry.setLocalRotation(new Quaternion().fromAngleAxis(FastMath.PI, Vector3f.UNIT_Y));        }        wheel.attachChild(wheelGeometry);        wheel.setLocalTranslation(position);        car.attachChild(wheel);        car.getControl(VehicleControl.class).addWheel(wheel, position, new Vector3f(0, -1, 0), new Vector3f(-1, 0, 0), .1f, .3f, isSteering);    }    private void createLights() {        AmbientLight ambientLight = new AmbientLight();        ambientLight.setColor(ColorRGBA.White.mult(.5f));        rootNode.addLight(ambientLight);        DirectionalLight directionalLight = new DirectionalLight();        directionalLight.setColor(ColorRGBA.White.mult(.7f));        directionalLight.setDirection(new Vector3f(0f, -2f, -1f).normalize());        getRootNode().addLight(directionalLight);        DirectionalLightShadowRenderer renderer = new DirectionalLightShadowRenderer(getAssetManager(), 1024, 1);        renderer.setLight(directionalLight);        getViewPort().addProcessor(renderer);    }    private void createTerrain(BulletAppState bulletAppState) {        Material grass = new Material(getAssetManager(), "Common/MatDefs/Light/Lighting.j3md");        grass.setBoolean("UseMaterialColors", true);        grass.setColor("Diffuse", new ColorRGBA(0, .5f, 0, 1f));        grass.setColor("Ambient", new ColorRGBA(0, .5f, 0, 1f));        grass.setColor("Specular", new ColorRGBA(0, 1f, 0, 1f));        TerrainQuad terrain = new TerrainQuad("terrain", 129, 129, null);        terrain.setShadowMode(RenderQueue.ShadowMode.Receive);        terrain.setMaterial(grass);        rootNode.attachChild(terrain);        terrain.addControl(new RigidBodyControl(CollisionShapeFactory.createMeshShape(terrain), 0.0F));        bulletAppState.getPhysicsSpace().add(terrain);    }}